#!/usr/bin/python3

"""
Authors:
Franco Marino  https://github.com/franco-marino
Jacopo Tediosi https://github.com/jacopotediosi
Team: Salted Chrackers
"""

import re

# Open file and remove all \r\n
chars = open("stream.txt", "r").read().replace('\r', '').replace('\n', '')

# Chars for row
nchars = 1024

# Search for dollars in the file
dollars = [m.start() for m in re.finditer('\$', chars)]

def is_number(s):
	try: 
		int(s)
		return True
	except ValueError:
		return False


def move(a_i,s,d):
	if d == "u":
		return a_i - nchars*s
	elif d == "d":
		return a_i + nchars*s
	elif d == "l":
		return a_i - s
	elif d == "r":
		return a_i + s

def read_number(a_i,d):
	#print(a_i)
	if d == "r":
		n = chars[actual_index+1]
		if is_number(chars[actual_index+2]):
			n += chars[actual_index+2]
		if is_number(chars[actual_index+3]):
			n += chars[actual_index+3]
	elif d=="l":
		n = chars[actual_index-1]
		if is_number(chars[actual_index-2]):
			n += chars[actual_index-2]
		if is_number(chars[actual_index-3]):
			n += chars[actual_index-3]
	elif d == "u":
		n = chars[actual_index-nchars]
		if is_number(chars[actual_index-nchars*2]):
			n += chars[actual_index-nchars*2]
		if is_number(chars[actual_index-nchars*3]):
			n += chars[actual_index-nchars*3]
	elif d == "d":
		n = chars[actual_index+nchars]
		if is_number(chars[actual_index+nchars*2]):
			n += chars[actual_index+nchars*2]
		if is_number(chars[actual_index+nchars*3]):
			n += chars[actual_index+nchars*3]
	#print(int(n))
	return int(n)


def pop_left(chars,actual_index):
	global flag
	global stack
	flag = stack.pop(len(stack)-1) + flag
	return move(actual_index,read_number(actual_index, "r"),"l")
	
def pop_right(chars,actual_index):
	global flag
	global stack
	flag = flag + stack.pop(len(stack)-1)
	return move(actual_index,read_number(actual_index, "l"),"r")
	
def remove(chars,actual_index):
	global flag
	global stack
	flag = flag[1:]
	return move(actual_index,read_number(actual_index, "d"),"u")
	
def add(chars,actual_index):
	global flag
	global stack
	flag = flag[:-1]
	return move(actual_index,read_number(actual_index, "u"),"d")
	
def reverse(chars,actual_index):
	global flag
	global stack
	flag = flag[::-1]
	return move(actual_index, 1,"d")

def push_right(chars,actual_index):
	global flag
	global stack
	stack.append(chars[actual_index+1])
	return move(actual_index,2, "r")
	
def push_left(chars,actual_index):
	global flag
	global stack
	stack.append(chars[actual_index-1])
	return move(actual_index,2, "l")
	
def push_above(chars,actual_index):
	global flag
	global stack
	stack.append(chars[actual_index-nchars])
	return move(actual_index,2, "u")
	
def push_bottom(chars,actual_index):
	global flag
	global stack
	stack.append(chars[actual_index+nchars])
	return move(actual_index,2, "d")
	
def jump_left(chars,actual_index):
	global flag
	global stack
	return move(actual_index,read_number(actual_index, "r"),"l")
	
def jump_right(chars,actual_index):
	global flag
	global stack
	return move(actual_index,read_number(actual_index,"l"), "r")
	
def jump_above(chars,actual_index):
	global flag
	global stack
	return move(actual_index,read_number(actual_index, "d"),"u")
	
def jump_down(chars,actual_index):
	global flag
	global stack
	return move(actual_index,read_number(actual_index,"u"), "d")

for d in dollars:
	actual_index=d
	stack = list()
	flag = ""
	iterations = 0
	try:
		while iterations < 1000:
			c = chars[actual_index]
			iterations += 1
			if c == "$":
				actual_index = move(actual_index,1,"d")
			elif c == "(":
				actual_index = pop_left(chars,actual_index)
			elif c == ")":
				actual_index = pop_right(chars,actual_index)
			elif c == "-":
				actual_index = remove(chars,actual_index)
			elif c == "+":
				actual_index = add(chars,actual_index)
			elif c == "%":
				actual_index = reverse(chars,actual_index)
			elif c == "[":
				actual_index = push_right(chars,actual_index)
			elif c == "]":
				actual_index = push_left(chars,actual_index)
			elif c == "*":
				actual_index = push_above(chars,actual_index)
			elif c == ".":
				actual_index = push_bottom(chars,actual_index)
			elif c == "<":
				actual_index = jump_left(chars,actual_index)
			elif c == ">":
				actual_index = jump_right(chars,actual_index)
			elif c == "^":
				actual_index = jump_above(chars,actual_index)
			elif c == "v":
				actual_index = jump_down(chars,actual_index)
			elif c == "#":
				break
			elif c == "@":
				break
		if "{FLG:" in flag: #Remove this if you want to see all elaborations	
	    	    print(flag)
	except:
		continue
